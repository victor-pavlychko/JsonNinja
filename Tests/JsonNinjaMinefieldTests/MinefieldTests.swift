// JsonNinja -- fast streaming JSON parser for Swift
//
// Copyright (c) 2021 Victor Pavlychko
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import Foundation
import XCTest
import JsonNinja

// Parsing JSON is a Minefield ğŸ’£
// http://seriot.ch/parsing_json.php
// https://github.com/nst/JSONTestSuite

final class MinefieldTests: XCTestCase {
    func testEmptyObject() {
        for testCase in Self.testCases {
            switch testCase.input.first! {
            case "i":
                XCTAssertTrue(executeTestCase(testCase), file: testCase.file, line: testCase.line)
            case "y":
                XCTAssertTrue(executeTestCase(testCase), file: testCase.file, line: testCase.line)
            case "n":
                XCTAssertFalse(executeTestCase(testCase), file: testCase.file, line: testCase.line)
            default:
                XCTFail("Unsupported test case", file: testCase.file, line: testCase.line)
            }
        }
    }

    private func executeTestCase(_ testCase: TestCase) -> Bool {
        do {
            print(testCase.input)
            let data = try Data(contentsOf: Self.dataDirectory.appendingPathComponent(testCase.input))
            let reader = JsonReader(data: data)
            var cursor = reader.startReading()
            try reader.skipValue(at: &cursor)
            return !reader.nextValue(at: &cursor)
        } catch {
            return false
        }
    }

    private static let dataDirectory = Bundle.module.resourceURL!
        .appendingPathComponent("Data", isDirectory: true)

    private struct TestCase {
        let input: String
        let file: StaticString
        let line: UInt

        init(input: String, file: StaticString = #filePath, line: UInt = #line) {
            self.input = input
            self.file = file
            self.line = line
        }
    }

    private static let testCases: [TestCase] = [
        TestCase(input: "i_number_double_huge_neg_exp.json"),
        TestCase(input: "i_number_huge_exp.json"),
        TestCase(input: "i_number_neg_int_huge_exp.json"),
        TestCase(input: "i_number_pos_double_huge_exp.json"),
        TestCase(input: "i_number_real_neg_overflow.json"),
        TestCase(input: "i_number_real_pos_overflow.json"),
        TestCase(input: "i_number_real_underflow.json"),
        TestCase(input: "i_number_too_big_neg_int.json"),
        TestCase(input: "i_number_too_big_pos_int.json"),
        TestCase(input: "i_number_very_big_negative_int.json"),
        TestCase(input: "i_object_key_lone_2nd_surrogate.json"),
        TestCase(input: "i_string_1st_surrogate_but_2nd_missing.json"),
        TestCase(input: "i_string_1st_valid_surrogate_2nd_invalid.json"),
        TestCase(input: "i_string_incomplete_surrogate_and_escape_valid.json"),
        TestCase(input: "i_string_incomplete_surrogate_pair.json"),
        TestCase(input: "i_string_incomplete_surrogates_escape_valid.json"),
        TestCase(input: "i_string_invalid_lonely_surrogate.json"),
        TestCase(input: "i_string_invalid_surrogate.json"),
        TestCase(input: "i_string_invalid_utf-8.json"),
        TestCase(input: "i_string_inverted_surrogates_U+1D11E.json"),
        TestCase(input: "i_string_iso_latin_1.json"),
        TestCase(input: "i_string_lone_second_surrogate.json"),
        TestCase(input: "i_string_lone_utf8_continuation_byte.json"),
        TestCase(input: "i_string_not_in_unicode_range.json"),
        TestCase(input: "i_string_overlong_sequence_2_bytes.json"),
        TestCase(input: "i_string_overlong_sequence_6_bytes_null.json"),
        TestCase(input: "i_string_overlong_sequence_6_bytes.json"),
        TestCase(input: "i_string_truncated-utf-8.json"),
        TestCase(input: "i_string_UTF-8_invalid_sequence.json"),
        TestCase(input: "i_string_UTF-16LE_with_BOM.json"),
        TestCase(input: "i_string_UTF8_surrogate_U+D800.json"),
        TestCase(input: "i_string_utf16BE_no_BOM.json"),
        TestCase(input: "i_string_utf16LE_no_BOM.json"),
        TestCase(input: "i_structure_500_nested_arrays.json"),
        TestCase(input: "i_structure_UTF-8_BOM_empty_object.json"),
        TestCase(input: "n_array_1_true_without_comma.json"),
        TestCase(input: "n_array_a_invalid_utf8.json"),
        TestCase(input: "n_array_colon_instead_of_comma.json"),
        TestCase(input: "n_array_comma_after_close.json"),
        TestCase(input: "n_array_comma_and_number.json"),
        TestCase(input: "n_array_double_comma.json"),
        TestCase(input: "n_array_double_extra_comma.json"),
        TestCase(input: "n_array_extra_close.json"),
        TestCase(input: "n_array_extra_comma.json"),
        TestCase(input: "n_array_incomplete_invalid_value.json"),
        TestCase(input: "n_array_incomplete.json"),
        TestCase(input: "n_array_inner_array_no_comma.json"),
        TestCase(input: "n_array_invalid_utf8.json"),
        TestCase(input: "n_array_items_separated_by_semicolon.json"),
        TestCase(input: "n_array_just_comma.json"),
        TestCase(input: "n_array_just_minus.json"),
        TestCase(input: "n_array_missing_value.json"),
        TestCase(input: "n_array_newlines_unclosed.json"),
        TestCase(input: "n_array_number_and_comma.json"),
        TestCase(input: "n_array_number_and_several_commas.json"),
        TestCase(input: "n_array_spaces_vertical_tab_formfeed.json"),
        TestCase(input: "n_array_star_inside.json"),
        TestCase(input: "n_array_unclosed_trailing_comma.json"),
        TestCase(input: "n_array_unclosed_with_new_lines.json"),
        TestCase(input: "n_array_unclosed_with_object_inside.json"),
        TestCase(input: "n_array_unclosed.json"),
        TestCase(input: "n_incomplete_false.json"),
        TestCase(input: "n_incomplete_null.json"),
        TestCase(input: "n_incomplete_true.json"),
        TestCase(input: "n_multidigit_number_then_00.json"),
        TestCase(input: "n_number_-1.0..json"),
        TestCase(input: "n_number_-01.json"),
        TestCase(input: "n_number_-2..json"),
        TestCase(input: "n_number_-NaN.json"),
        TestCase(input: "n_number_.-1.json"),
        TestCase(input: "n_number_.2e-3.json"),
        TestCase(input: "n_number_++.json"),
        TestCase(input: "n_number_+1.json"),
        TestCase(input: "n_number_+Inf.json"),
        TestCase(input: "n_number_0_capital_E.json"),
        TestCase(input: "n_number_0_capital_E+.json"),
        TestCase(input: "n_number_0.1.2.json"),
        TestCase(input: "n_number_0.3e.json"),
        TestCase(input: "n_number_0.3e+.json"),
        TestCase(input: "n_number_0.e1.json"),
        TestCase(input: "n_number_0e.json"),
        TestCase(input: "n_number_0e+.json"),
        TestCase(input: "n_number_1_000.json"),
        TestCase(input: "n_number_1.0e-.json"),
        TestCase(input: "n_number_1.0e.json"),
        TestCase(input: "n_number_1.0e+.json"),
        TestCase(input: "n_number_1eE2.json"),
        TestCase(input: "n_number_2.e-3.json"),
        TestCase(input: "n_number_2.e+3.json"),
        TestCase(input: "n_number_2.e3.json"),
        TestCase(input: "n_number_9.e+.json"),
        TestCase(input: "n_number_expression.json"),
        TestCase(input: "n_number_hex_1_digit.json"),
        TestCase(input: "n_number_hex_2_digits.json"),
        TestCase(input: "n_number_Inf.json"),
        TestCase(input: "n_number_infinity.json"),
        TestCase(input: "n_number_invalid-negative-real.json"),
        TestCase(input: "n_number_invalid-utf-8-in-bigger-int.json"),
        TestCase(input: "n_number_invalid-utf-8-in-exponent.json"),
        TestCase(input: "n_number_invalid-utf-8-in-int.json"),
        TestCase(input: "n_number_invalid+-.json"),
        TestCase(input: "n_number_minus_infinity.json"),
        TestCase(input: "n_number_minus_sign_with_trailing_garbage.json"),
        TestCase(input: "n_number_minus_space_1.json"),
        TestCase(input: "n_number_NaN.json"),
        TestCase(input: "n_number_neg_int_starting_with_zero.json"),
        TestCase(input: "n_number_neg_real_without_int_part.json"),
        TestCase(input: "n_number_neg_with_garbage_at_end.json"),
        TestCase(input: "n_number_real_garbage_after_e.json"),
        TestCase(input: "n_number_real_with_invalid_utf8_after_e.json"),
        TestCase(input: "n_number_real_without_fractional_part.json"),
        TestCase(input: "n_number_starting_with_dot.json"),
        TestCase(input: "n_number_U+FF11_fullwidth_digit_one.json"),
        TestCase(input: "n_number_with_alpha_char.json"),
        TestCase(input: "n_number_with_alpha.json"),
        TestCase(input: "n_number_with_leading_zero.json"),
        TestCase(input: "n_object_bad_value.json"),
        TestCase(input: "n_object_bracket_key.json"),
        TestCase(input: "n_object_comma_instead_of_colon.json"),
        TestCase(input: "n_object_double_colon.json"),
        TestCase(input: "n_object_emoji.json"),
        TestCase(input: "n_object_garbage_at_end.json"),
        TestCase(input: "n_object_key_with_single_quotes.json"),
        TestCase(input: "n_object_lone_continuation_byte_in_key_and_trailing_comma.json"),
        TestCase(input: "n_object_missing_colon.json"),
        TestCase(input: "n_object_missing_key.json"),
        TestCase(input: "n_object_missing_semicolon.json"),
        TestCase(input: "n_object_missing_value.json"),
        TestCase(input: "n_object_no-colon.json"),
        TestCase(input: "n_object_non_string_key_but_huge_number_instead.json"),
        TestCase(input: "n_object_non_string_key.json"),
        TestCase(input: "n_object_repeated_null_null.json"),
        TestCase(input: "n_object_several_trailing_commas.json"),
        TestCase(input: "n_object_single_quote.json"),
        TestCase(input: "n_object_trailing_comma.json"),
        TestCase(input: "n_object_trailing_comment_open.json"),
        TestCase(input: "n_object_trailing_comment_slash_open_incomplete.json"),
        TestCase(input: "n_object_trailing_comment_slash_open.json"),
        TestCase(input: "n_object_trailing_comment.json"),
        TestCase(input: "n_object_two_commas_in_a_row.json"),
        TestCase(input: "n_object_unquoted_key.json"),
        TestCase(input: "n_object_unterminated-value.json"),
        TestCase(input: "n_object_with_single_string.json"),
        TestCase(input: "n_object_with_trailing_garbage.json"),
        TestCase(input: "n_single_space.json"),
        TestCase(input: "n_string_1_surrogate_then_escape_u.json"),
        TestCase(input: "n_string_1_surrogate_then_escape_u1.json"),
        TestCase(input: "n_string_1_surrogate_then_escape_u1x.json"),
        TestCase(input: "n_string_1_surrogate_then_escape.json"),
        TestCase(input: "n_string_accentuated_char_no_quotes.json"),
        TestCase(input: "n_string_backslash_00.json"),
        TestCase(input: "n_string_escape_x.json"),
        TestCase(input: "n_string_escaped_backslash_bad.json"),
        TestCase(input: "n_string_escaped_ctrl_char_tab.json"),
        TestCase(input: "n_string_escaped_emoji.json"),
        TestCase(input: "n_string_incomplete_escape.json"),
        TestCase(input: "n_string_incomplete_escaped_character.json"),
        TestCase(input: "n_string_incomplete_surrogate_escape_invalid.json"),
        TestCase(input: "n_string_incomplete_surrogate.json"),
        TestCase(input: "n_string_invalid_backslash_esc.json"),
        TestCase(input: "n_string_invalid_unicode_escape.json"),
        TestCase(input: "n_string_invalid_utf8_after_escape.json"),
        TestCase(input: "n_string_invalid-utf-8-in-escape.json"),
        TestCase(input: "n_string_leading_uescaped_thinspace.json"),
        TestCase(input: "n_string_no_quotes_with_bad_escape.json"),
        TestCase(input: "n_string_single_doublequote.json"),
        TestCase(input: "n_string_single_quote.json"),
        TestCase(input: "n_string_single_string_no_double_quotes.json"),
        TestCase(input: "n_string_start_escape_unclosed.json"),
        TestCase(input: "n_string_unescaped_ctrl_char.json"),
        TestCase(input: "n_string_unescaped_newline.json"),
        TestCase(input: "n_string_unescaped_tab.json"),
        TestCase(input: "n_string_unicode_CapitalU.json"),
        TestCase(input: "n_string_with_trailing_garbage.json"),
//        TestCase(input: "n_structure_100000_opening_arrays.json"),
        TestCase(input: "n_structure_angle_bracket_..json"),
        TestCase(input: "n_structure_angle_bracket_null.json"),
        TestCase(input: "n_structure_array_trailing_garbage.json"),
        TestCase(input: "n_structure_array_with_extra_array_close.json"),
        TestCase(input: "n_structure_array_with_unclosed_string.json"),
        TestCase(input: "n_structure_ascii-unicode-identifier.json"),
        TestCase(input: "n_structure_capitalized_True.json"),
        TestCase(input: "n_structure_close_unopened_array.json"),
        TestCase(input: "n_structure_comma_instead_of_closing_brace.json"),
        TestCase(input: "n_structure_double_array.json"),
        TestCase(input: "n_structure_end_array.json"),
        TestCase(input: "n_structure_incomplete_UTF8_BOM.json"),
        TestCase(input: "n_structure_lone-invalid-utf-8.json"),
        TestCase(input: "n_structure_lone-open-bracket.json"),
        TestCase(input: "n_structure_no_data.json"),
        TestCase(input: "n_structure_null-byte-outside-string.json"),
        TestCase(input: "n_structure_number_with_trailing_garbage.json"),
        TestCase(input: "n_structure_object_followed_by_closing_object.json"),
        TestCase(input: "n_structure_object_unclosed_no_value.json"),
        TestCase(input: "n_structure_object_with_comment.json"),
        TestCase(input: "n_structure_object_with_trailing_garbage.json"),
        TestCase(input: "n_structure_open_array_apostrophe.json"),
        TestCase(input: "n_structure_open_array_comma.json"),
//        TestCase(input: "n_structure_open_array_object.json"),
        TestCase(input: "n_structure_open_array_open_object.json"),
        TestCase(input: "n_structure_open_array_open_string.json"),
        TestCase(input: "n_structure_open_array_string.json"),
        TestCase(input: "n_structure_open_object_close_array.json"),
        TestCase(input: "n_structure_open_object_comma.json"),
        TestCase(input: "n_structure_open_object_open_array.json"),
        TestCase(input: "n_structure_open_object_open_string.json"),
        TestCase(input: "n_structure_open_object_string_with_apostrophes.json"),
        TestCase(input: "n_structure_open_object.json"),
        TestCase(input: "n_structure_open_open.json"),
        TestCase(input: "n_structure_single_eacute.json"),
        TestCase(input: "n_structure_single_star.json"),
        TestCase(input: "n_structure_trailing_#.json"),
        TestCase(input: "n_structure_U+2060_word_joined.json"),
        TestCase(input: "n_structure_uescaped_LF_before_string.json"),
        TestCase(input: "n_structure_unclosed_array_partial_null.json"),
        TestCase(input: "n_structure_unclosed_array_unfinished_false.json"),
        TestCase(input: "n_structure_unclosed_array_unfinished_true.json"),
        TestCase(input: "n_structure_unclosed_array.json"),
        TestCase(input: "n_structure_unclosed_object.json"),
        TestCase(input: "n_structure_unicode-identifier.json"),
        TestCase(input: "n_structure_UTF8_BOM_no_data.json"),
        TestCase(input: "n_structure_whitespace_formfeed.json"),
        TestCase(input: "n_structure_whitespace_U+2060_word_joiner.json"),
        TestCase(input: "y_array_arraysWithSpaces.json"),
        TestCase(input: "y_array_empty-string.json"),
        TestCase(input: "y_array_empty.json"),
        TestCase(input: "y_array_ending_with_newline.json"),
        TestCase(input: "y_array_false.json"),
        TestCase(input: "y_array_heterogeneous.json"),
        TestCase(input: "y_array_null.json"),
        TestCase(input: "y_array_with_1_and_newline.json"),
        TestCase(input: "y_array_with_leading_space.json"),
        TestCase(input: "y_array_with_several_null.json"),
        TestCase(input: "y_array_with_trailing_space.json"),
        TestCase(input: "y_number_0e+1.json"),
        TestCase(input: "y_number_0e1.json"),
        TestCase(input: "y_number_after_space.json"),
        TestCase(input: "y_number_double_close_to_zero.json"),
        TestCase(input: "y_number_int_with_exp.json"),
        TestCase(input: "y_number_minus_zero.json"),
        TestCase(input: "y_number_negative_int.json"),
        TestCase(input: "y_number_negative_one.json"),
        TestCase(input: "y_number_negative_zero.json"),
        TestCase(input: "y_number_real_capital_e_neg_exp.json"),
        TestCase(input: "y_number_real_capital_e_pos_exp.json"),
        TestCase(input: "y_number_real_capital_e.json"),
        TestCase(input: "y_number_real_exponent.json"),
        TestCase(input: "y_number_real_fraction_exponent.json"),
        TestCase(input: "y_number_real_neg_exp.json"),
        TestCase(input: "y_number_real_pos_exponent.json"),
        TestCase(input: "y_number_simple_int.json"),
        TestCase(input: "y_number_simple_real.json"),
        TestCase(input: "y_number.json"),
        TestCase(input: "y_object_basic.json"),
        TestCase(input: "y_object_duplicated_key_and_value.json"),
        TestCase(input: "y_object_duplicated_key.json"),
        TestCase(input: "y_object_empty_key.json"),
        TestCase(input: "y_object_empty.json"),
        TestCase(input: "y_object_escaped_null_in_key.json"),
        TestCase(input: "y_object_extreme_numbers.json"),
        TestCase(input: "y_object_long_strings.json"),
        TestCase(input: "y_object_simple.json"),
        TestCase(input: "y_object_string_unicode.json"),
        TestCase(input: "y_object_with_newlines.json"),
        TestCase(input: "y_object.json"),
        TestCase(input: "y_string_1_2_3_bytes_UTF-8_sequences.json"),
        TestCase(input: "y_string_accepted_surrogate_pair.json"),
        TestCase(input: "y_string_accepted_surrogate_pairs.json"),
        TestCase(input: "y_string_allowed_escapes.json"),
        TestCase(input: "y_string_backslash_and_u_escaped_zero.json"),
        TestCase(input: "y_string_backslash_doublequotes.json"),
        TestCase(input: "y_string_comments.json"),
        TestCase(input: "y_string_double_escape_a.json"),
        TestCase(input: "y_string_double_escape_n.json"),
        TestCase(input: "y_string_escaped_control_character.json"),
        TestCase(input: "y_string_escaped_noncharacter.json"),
        TestCase(input: "y_string_in_array_with_leading_space.json"),
        TestCase(input: "y_string_in_array.json"),
        TestCase(input: "y_string_last_surrogates_1_and_2.json"),
        TestCase(input: "y_string_nbsp_uescaped.json"),
        TestCase(input: "y_string_nonCharacterInUTF-8_U+10FFFF.json"),
        TestCase(input: "y_string_nonCharacterInUTF-8_U+FFFF.json"),
        TestCase(input: "y_string_null_escape.json"),
        TestCase(input: "y_string_one-byte-utf-8.json"),
        TestCase(input: "y_string_pi.json"),
        TestCase(input: "y_string_reservedCharacterInUTF-8_U+1BFFF.json"),
        TestCase(input: "y_string_simple_ascii.json"),
        TestCase(input: "y_string_space.json"),
        TestCase(input: "y_string_surrogates_U+1D11E_MUSICAL_SYMBOL_G_CLEF.json"),
        TestCase(input: "y_string_three-byte-utf-8.json"),
        TestCase(input: "y_string_two-byte-utf-8.json"),
        TestCase(input: "y_string_u+2028_line_sep.json"),
        TestCase(input: "y_string_u+2029_par_sep.json"),
        TestCase(input: "y_string_uEscape.json"),
        TestCase(input: "y_string_uescaped_newline.json"),
        TestCase(input: "y_string_unescaped_char_delete.json"),
        TestCase(input: "y_string_unicode_2.json"),
        TestCase(input: "y_string_unicode_escaped_double_quote.json"),
        TestCase(input: "y_string_unicode_U+1FFFE_nonchar.json"),
        TestCase(input: "y_string_unicode_U+10FFFE_nonchar.json"),
        TestCase(input: "y_string_unicode_U+200B_ZERO_WIDTH_SPACE.json"),
        TestCase(input: "y_string_unicode_U+2064_invisible_plus.json"),
        TestCase(input: "y_string_unicode_U+FDD0_nonchar.json"),
        TestCase(input: "y_string_unicode_U+FFFE_nonchar.json"),
        TestCase(input: "y_string_unicode.json"),
        TestCase(input: "y_string_unicodeEscapedBackslash.json"),
        TestCase(input: "y_string_utf8.json"),
        TestCase(input: "y_string_with_del_character.json"),
        TestCase(input: "y_structure_lonely_false.json"),
        TestCase(input: "y_structure_lonely_int.json"),
        TestCase(input: "y_structure_lonely_negative_real.json"),
        TestCase(input: "y_structure_lonely_null.json"),
        TestCase(input: "y_structure_lonely_string.json"),
        TestCase(input: "y_structure_lonely_true.json"),
        TestCase(input: "y_structure_string_empty.json"),
        TestCase(input: "y_structure_trailing_newline.json"),
        TestCase(input: "y_structure_true_in_array.json"),
        TestCase(input: "y_structure_whitespace_array.json"),
    ]
}
